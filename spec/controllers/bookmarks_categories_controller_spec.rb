require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BookmarksCategoriesController do

  # This should return the minimal set of attributes required to create a valid
  # BookmarksCategory. As you add validations to BookmarksCategory, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BookmarksCategoriesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before(:all){ create_init_data }
  after(:all){ delete_init_data }

  before  do
    @bookmarks_category = BookmarksCategory.first
    @admin = FactoryGirl.create(:admin)
    sign_in @admin
    #puts "Admin user signin cookie: "+cookies[:remember_token].to_s
  end


  #the (subject)line declare the variable that is use in all the test
  subject { @bookmarks_category }

  #***********************************
  # rspec test  index
  #***********************************


  describe "GET index",tag_index:true do

    context "is admin user" do
      let(:bookmarks_categories_all) { BookmarksCategory.order("item_id,id").all }

      it "assigns all bookmarks_categories as :bookmarks_categories" do
        get :index
        assigns(:bookmarks_categories).should eq(bookmarks_categories_all)
      end

      it "renders the :index view" do
        get :index
        response.should render_template :index
      end
    end
    context "is not admin user" do
      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user
      end

      it "redirect to root " do
        get :index
        response.should redirect_to root_path
      end

      it "not render to index " do
        get :index
        response.should_not render_template :index
      end
    end
  end

  #***********************************
  # rspec test  show
  #***********************************


  describe "GET show", tag_show:true do

    context "is admin user" do

      it "assigns the requested bookmarks category as @bookmark category" do
        get :show, id: @bookmarks_category
        assigns(:bookmarks_category).should eq(@bookmarks_category)

      end

      it "renders the #show view" do

        get :show, id: @bookmarks_category
        response.should render_template :show
      end

    end

    context "is not admin user" do
      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user
      end

      it "redirect to root " do
        get :show, id:@bookmarks_category
        response.should redirect_to root_path
      end

      it "not render to show " do
        get :show, id:@bookmarks_category
        response.should_not render_template :show
      end

    end
  end

  #***********************************
  # rspec test  new
  #***********************************


  describe "GET new",tag_new:true do

    let(:item){Item.first}

    context "is admin user"  do
      it "assigns a new bookmarks category as @bookmark category" do

        new_bookmarks_category = FactoryGirl.create(:bookmarks_category,item_id:item.id)

        BookmarksCategory.should_receive(:new).and_return(new_bookmarks_category)
        get :new
        assigns[:bookmarks_category].should eq(new_bookmarks_category)
      end
    end
    context "is not admin user"  do
      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user
      end

      it "redirect to root" do
        get :new
        response.should redirect_to root_path
      end
    end
  end


  #***********************************
  # rspec test  edit
  #***********************************


  describe "GET edit", tag_edit:true do

    let(:item){Item.first}
    context "is admin user"  do

      it "assigns the requested bookmarks category as @bookmark category" do

        new_bookmark_category = FactoryGirl.create(:bookmarks_category,item_id:item.id)
        get :edit, id: new_bookmark_category
        assigns[:bookmarks_category].should eq(new_bookmark_category)
      end

    end





    context "is not admin user" do

      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user

      end

      it "redirect to root " do
        new_bookmarks_category = FactoryGirl.create(:bookmarks_category,item_id:item.id)
        get :edit, id: new_bookmarks_category
        response.should redirect_to root_path
      end
    end
  end

  #***********************************
  # rspec test  create
  #***********************************

  describe "POST create", tag_create:true  do

    describe "is admin user" do
      context "with valid params" do

        it "creates a new bookmarks_category" do

          expect {

            post :create,bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.first)
          }.to change(BookmarksCategory, :count).by(1)

        end

        it "assigns a newly created bookmarks_category as @bookmarks_category" do
          post :create,bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.first)
          assigns(:bookmarks_category).should be_a(BookmarksCategory)
          assigns(:bookmarks_category).should be_persisted
        end

        it "redirects to the created bookmarks_category" do
          post :create, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.first)
          response.should redirect_to(BookmarksCategory.last)
        end
      end

      context "with invalid params" do

        context "with invalid attributes" do
          it "does not save the new contact" do

            expect{ post :create, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:nil)
            }.to_not change(BookmarksCategory,:count)

          end
          it "re-renders the new method" do
            post :create, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:nil)
            response.should render_template :new
          end
        end

      end

    end

    describe "is not admin user" do
      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user
      end

      it "redirects to root" do
        post :create, bookmarks_category:  FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.first)
        response.should redirect_to(root_path)
      end
      it "not redirects to the created bookmarks_category" do
        post :create, bookmarks_category:FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.first)
        response.should_not redirect_to(BookmarksCategory.last)
      end
    end
  end



  #***********************************
  # rspec test  update
  #***********************************


  describe "PUT update", tag_update:true do

    #let(:item_last){FactoryGirl.create(:item)}
    describe "is admin user" do
      context "valid attributes" do
        it "located the requested @bookmarks_category" do
          FactoryGirl.create(:item)
          put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.last.id)
          assigns(:bookmarks_category).should eq(@bookmarks_category)
        end
      end

      it "changes item_id on @bookmarks_category's attributes when is only on item" do
        item_new_1 = FactoryGirl.create(:item)
        item_new_2 = FactoryGirl.create(:item)
        bookmarks_category_new_1 = FactoryGirl.create(:bookmarks_category,item_id:item_new_1.id)
        put :update, id: bookmarks_category_new_1, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category, item_id:item_new_2.id)
        response.should redirect_to bookmarks_categories_url
      end

      it "redirects to the updated bookmarks_category" do
        put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.last.id)
        response.should redirect_to @bookmarks_category
      end


      context "invalid attributes" do
        # Create a new variable with the same data but with a nil id
        let(:bookmarks_category_same){ @bookmarks_category.dup}

        it "locates the requested @bookmarks_category" do
          put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:nil)
          assigns(:bookmarks_category).should eq(@bookmarks_category)
        end
        it "does not change @bookmarks_category's attributes" do

          FactoryGirl.create(:item)
          #puts "same "+bookmarks_category_same.item_id.to_s
          #puts "same old "+@bookmarks_category.item_id.to_s
          put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category, item_id:Item.last.id)
          @bookmarks_category.reload
          #puts "new item_id "+@bookmarks_category.item_id.to_s
          @bookmarks_category.item_id.should_not eq(bookmarks_category_same)
        end
        it "re-renders the edit method" do
          put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:nil)
          response.should render_template :edit
        end
      end
    end

    describe "is not admin user" do
      before do
        @user  = FactoryGirl.create(:user)
        sign_in @user
      end

      it "redirects to root " do
        put :update, id: @bookmarks_category, bookmarks_category: FactoryGirl.attributes_for(:bookmarks_category,item_id:Item.last.id)
        response.should redirect_to root_path
      end

    end

  end


  #***********************************
  # rspec test  #json_index
  #***********************************


end
